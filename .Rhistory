# packages
#pacman::p_load(tidyverse, dplyr, stringdist)
library(tidyverse, dplyr, stringdist)
# load data
data <- read_csv("./data/folketinget_1990_2021_raw.csv")
# sample ~200 values across different years
set.seed(124)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text, doc_id, Year, Name)
# assign rater
samples$who <- ifelse(samples$doc_id %in% ((sample(samples$doc_id, nrow(samples)/2))), "Morten", "Gustav")
############################################### MORTEN RATING ######################################################
morten <- samples %>% filter(who == "Morten")
cat(paste0("Assigned to: ", morten$Name[morten$doc_id == 81436], "\n"))
assessment <- function(df){
# list of ids
ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(id in ids){
cat(paste0("text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", id, " assigned correctly? "))
row <- data.frame(doc_id = id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
assessment <- function(df){
# list of ids
ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id]))
cat(paste0("\n text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id]))
cat(paste0("\n text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id]))
cat(paste0("\n text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id]))
cat(paste0("Text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id], "\n"))
cat(paste0("Text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
gustav <- samples %>% filter(who == "Gustav")
write.csv(gustav, "./data/samples_gustav.csv")
morten <- samples %>% filter(who == "Morten")
write.csv(morten, "./data/samples_morten.csv")
morten <- read_csv("./data/samples_morten.csv")
gustav <- read_csv("./data/samples_gustav.csv")
gustav_ratings <- assessment(df = gustav)
knitr::opts_chunk$set(echo = TRUE)
gustav <- read_csv("./data/samples_gustav.csv")
# packages
pacman::p_load(tidyverse, dplyr, stringdist)
morten <- read_csv("./data/samples_morten.csv")
gustav <- read_csv("./data/samples_gustav.csv")
lapply(morten$id, write, "morten_pdf.txt", append=TRUE)
lapply(gustav$id, write, "gustav_pdf.txt", append=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# packages
pacman::p_load(tidyverse, dplyr, stringdist)
################################################### FUNCTION ######################################################
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id],".pdf", "\n"))
cat(paste0("Text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
################################################### FUNCTION ######################################################
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id],".pdf", "\n"))
cat(paste0("Text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
gustav <- read_csv("./data/samples_gustav.csv")
hep <- gustav[1:30]
hep <- gustav[1:30,]
hep <- gustav[1:32,]
gustav_ratings <- assessment(df = gustav[1:32])
gustav_ratings <- assessment(df = gustav[1:32,])
knitr::opts_chunk$set(echo = TRUE)
# packages
pacman::p_load(tidyverse, dplyr, stringdist)
gustav <- read_csv("./data/samples_gustav.csv")
gustav_ratings <- assessment(df = gustav[1:32,])
################################################### FUNCTION ######################################################
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id],".pdf", "\n"))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
cat(paste0("Text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
gustav_ratings <- assessment(df = gustav[1:32,])
knitr::opts_chunk$set(echo = TRUE)
# packages
pacman::p_load(tidyverse, dplyr, stringdist)
################################################### FUNCTION ######################################################
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name:\n", df$id[df$doc_id == doc_id],".pdf", "\n"))
cat(paste0("Assigned to:\n ", df$Name[df$doc_id == doc_id], "\n"))
cat(paste0("Text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
gustav <- read_csv("./data/samples_gustav.csv")
gustav_ratings <- assessment(df = gustav[1:32,])
# "Arbejdsministeren" mangler i titler
# Procedural phrases: "kort bemærkning"
write_csv(gustav_ratings, "./data/assesment/gustav_ratings_1_32.csv")
################################################### FUNCTION ######################################################
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
i = 1
for(doc_id in doc_ids){
cat(paste0("Document number: ", i," out of ", length(doc_ids)))
cat(paste0("PDF name:\n", df$id[df$doc_id == doc_id],".pdf", "\n"))
cat(paste0("Assigned to:\n ", df$Name[df$doc_id == doc_id], "\n"))
cat(paste0("Text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
gustav_ratings <- assessment(df = gustav[33:50,])
write_csv(gustav_ratings, "./data/assesment/gustav_ratings_33_50.csv")
i = i+1
################################################### FUNCTION ######################################################
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
i = 1
for(doc_id in doc_ids){
cat(paste0("Document number: ", i," out of ", length(doc_ids), "\n"))
cat(paste0("PDF name:\n", df$id[df$doc_id == doc_id],".pdf", "\n"))
cat(paste0("Assigned to:\n ", df$Name[df$doc_id == doc_id], "\n"))
cat(paste0("Text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
i = i+1
}
return(ratings)
}
gustav_ratings <- assessment(df = gustav[51:65,])
write_csv(gustav_ratings, "./data/assesment/gustav_ratings_51_65.csv")
gustav_ratings <- assessment(df = gustav[66:80,])
write_csv(gustav_ratings, "./data/assesment/gustav_ratings_66_80.csv")
gustav_ratings <- assessment(df = gustav[81:96,])
write_csv(gustav_ratings, "./data/assesment/gustav_ratings_81_96.csv")
list.files(".data/assesment/",pattern = "*.csv")
list.files(".data/assesment/",pattern = ".csv")
list.files("./data/assesment/",pattern = ".csv")
ratings <- list.files("./data/assesment/",pattern = ".csv") %>%
lapply(~read_csv(.x))
ratings <- list.files("./data/assesment/",pattern = ".csv") %>%
lapply(read_csv(.x))
ratings <- list.files("./data/assesment/",pattern = ".csv") %>%
lapply(read_csv)
ratings <- list.files("./data/assesment/",pattern = ".csv") %>%
lapply(read_csv())
ratings <- list.files("./data/assesment/",pattern = ".csv") %>%
map_df(read_csv())
ratings <- list.files("./data/assesment/",pattern = ".csv") %>%
map_df(~read_csv(.x))
ratings <- list.files("./data/assesment/",pattern = ".csv") %>%
map_df(~read_csv(file = .x))
ratings <- list.files("./data/assesment/",pattern = ".csv", full.names = T) %>%
map_df(~read_csv(file = .x))
View(ratings)
write_csv(ratings, "./data/assesment/gustav_ratings.csv")
knitr::opts_chunk$set(echo = TRUE)
sgd %>%
ggplot()+
aes(x = Year, y = score, color = metric)+
geom_point()+
geom_smooth(alpha = 0.1, size = 0.5)+
facet_wrap(~class)+
theme_minimal()
pacman::p_load(tidyverse)
sgd %>%
ggplot()+
aes(x = Year, y = score, color = metric)+
geom_point()+
geom_smooth(alpha = 0.1, size = 0.5)+
facet_wrap(~class)+
theme_minimal()
#################### INSPECTING THE RESULTS ###########################
# Import the results
setwd("~/bachelor_2021/d")
#################### INSPECTING THE RESULTS ###########################
# Import the results
pacman::p_load(tidyverse)
ML_results <- read_csv("./data/cv_results_1990-2021_ny.csv")
ML_subset <- read_csv("./data/cv_results_subset.csv")
ML_coalition <- read_csv("./data/cv_results_1990-2021_coalition.csv")
pacman::p_load(lme4)
coalition <- ML_coalition %>% group_by(Year) %>% summarise(coalition_kappa = mean(kappa_test), coalition_acc = mean(accuracy_score)) %>% pivot_longer(cols = c("coalition_kappa", "coalition_acc"), names_to = "metric", values_to = "score")
party <- ML_results %>% group_by(Year) %>% summarise(party_kappa = mean(kappa_test), party_acc = mean(accuracy_score)) %>% pivot_longer(cols = c("party_kappa", "party_acc"), names_to = "metric", values_to = "score")
sgd <- rbind(coalition, party) %>% mutate(class = ifelse(str_detect(metric, "coalition"), "coalition","party"))
sgd %>%
ggplot()+
aes(x = Year, y = score, color = metric)+
geom_point()+
geom_smooth(alpha = 0.1, size = 0.5)+
facet_wrap(~class)+
theme_minimal()
sgd %>%
ggplot()+
aes(x = Year, y = score, color = metric)+
geom_point()+
geom_line(size = 0.5)+
#geom_smooth(alpha = 0.1, size = 0.5)+
facet_wrap(~class)+
theme_minimal()
ML_twoparty <- read_csv("./data/cv_results_1990-2021_twoparty.csv")
View(ML_twoparty)
ML_twoparty %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(method = "lm", alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "Coalition")+
theme_minimal()
# Plotting the results
ML_subset %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(method = "lm", alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "Subset")+
theme_minimal()
ML_results %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(method = "lm", alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "Whole dataset")+
theme_minimal()
ML_coalition %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(method = "lm", alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "Coalition")+
theme_minimal()
ML_twoparty %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(method = "lm", alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "Coalition")+
theme_minimal()
ML_twoparty %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "Coalition")+
theme_minimal()
ML_twoparty %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "SD vs. Venstre")+
theme_minimal()
ML_twoparty %>%
group_by(Year) %>%
summarise(kappa = mean(accuracy_score)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "SD vs. Venstre")+
theme_minimal()
ML_twoparty %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "SD vs. Venstre")+
theme_minimal()
hep <- read_csv("./data/folketinget_1990_2021_raw.csv")
hej <- hep %>% filter(Parti %in% c("Venstre", "Socialdemokratiet"))
hej %>% group_by(Month, Parti) %>% summarize(n())
permonth <- hej %>% group_by(Month, Parti) %>% summarize(n())
View(permonth)
permonth <- hej %>% group_by(Year, Parti) %>% summarize(n())
per <- hej %>% group_by(Year, Parti) %>% summarize(n())
View(per)
# Plotting the results
ML_subset %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(method = "lm", alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "Subset")+
theme_minimal()
ML_results %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(method = "lm", alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "Whole dataset")+
theme_minimal()
ML_coalition %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(method = "lm", alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "Coalition")+
theme_minimal()
ML_twoparty %>%
group_by(Year) %>%
summarise(kappa = mean(kappa_test)) %>%
ggplot()+
aes(x = Year, y = kappa)+
geom_point()+
geom_line(color = wesanderson::wes_palette("Darjeeling1")[2])+
geom_smooth(alpha = 0.1, color = wesanderson::wes_palette("Darjeeling1")[1], size = 0.5)+
ylim(0, 1)+
labs(y = "Cohen Kappa score", title = "SD vs. Venstre")+
theme_minimal()
