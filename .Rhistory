geom_density()+
labs(title = "Before Transformation")
ggplot(x, aes(x = Inclusion)) +
geom_density()+
labs(title = "After Transformation")
ggplot(agg, aes(x = scale(Differentiation))) +
geom_density()+
labs(title = "Before Transformation")
ggplot(x, aes(x = Differentiation)) +
geom_density()+
labs(title = "After Transformation")
ggplot(agg, aes(x = (Differentiation))) +
geom_density()+
labs(title = "Before Transformation")
# Plotting the raw data
agg %>% group_by(Date) %>% pivot_longer(cols = c("Inclusion", "Differentiation"), names_to = "Need") %>%
ggplot()+
aes(x = Date, y = value, color = Need)+
#geom_line()+
geom_point()+
geom_smooth(method = "lm", color = )
# Plotting the raw data
agg %>% group_by(Date) %>% pivot_longer(cols = c("Inclusion", "Differentiation"), names_to = "Need") %>%
ggplot()+
aes(x = Date, y = value, color = Need)+
#geom_line()+
geom_point()+
geom_smooth(method = "lm", color = )
# Plotting the raw data
agg %>% group_by(Date) %>% pivot_longer(cols = c("Inclusion", "Differentiation"), names_to = "Need") %>%
ggplot()+
aes(x = Date, y = value, color = Need)+
#geom_line()+
geom_point()+
geom_smooth(method = "lm")
#checking out the outome variable
ggplot(agg, aes(x = log(Inclusion))) +
geom_density()+
labs(title = "Before Transformation")
#checking out the outome variable
ggplot(agg, aes(x = log(Inclusion))) +
geom_density()+
labs(title = "Before Transformation")
#checking out the outome variable
ggplot(agg, aes(x = scale(log(Inclusion)))) +
geom_density()+
labs(title = "Before Transformation")
#checking out the outome variable
ggplot(agg, aes(x = scale(Inclusion))) +
geom_density()+
labs(title = "Before Transformation")
pacman::p_load(fitdistrplus)
descdist(x, discrete = FALSE)
descdist(df$Inclusion, discrete = FALSE)
plot(fitdist(df$Inclusion, "norm"))
plot(fitdist(df$Inclusion, "lnorm"))
plot(fitdist(df$Inclusion, "lnorm"))
plot(fitdist(df$Inclusion, "poi"))
plot(fitdist(df$Inclusion, "pois"))
plot(fitdist(df$Inclusion, "exp"))
plot(fitdist(df$Inclusion, "gamma"))
plot(fitdist(df$Inclusion, "gamma"))
plot(fitdist(df$Inclusion, "nbinom"))
plot(fitdist(df$Inclusion, "geom"))
plot(fitdist(df$Inclusion, "beta"))
plot(fitdist(df$Inclusion, "unif"))
plot(fitdist(df$Inclusion, "geom"))
plot(fitdist(df$Inclusion, "lnorm"))
cor(df$Inclusion,df$Differentiation)
cor(df$Inclusion,lag(df$Inclusion))
#checking out the outome variable
ggplot(agg, aes(x = scale(Inclusion))) +
geom_density()+
labs(title = "Before Transformation")
ggplot(x, aes(x = Inclusion)) +
geom_density()+
labs(title = "After Transformation")
ggplot(agg, aes(x = (Differentiation))) +
geom_density()+
labs(title = "Before Transformation")
ggplot(x, aes(x = Differentiation)) +
geom_density()+
labs(title = "After Transformation")
#checking out the outome variable
ggplot(agg, aes(x = (Inclusion))) +
geom_density()+
labs(title = "Before Transformation")
#checking out the outome variable
ggplot(agg, aes(x = (Inclusion))) +
geom_density()+
labs(title = "Before Transformation")
ggplot(x, aes(x = Inclusion)) +
geom_density()+
labs(title = "After Transformation")
ggplot(agg, aes(x = (Differentiation))) +
geom_density()+
labs(title = "Before Transformation")
ggplot(x, aes(x = Differentiation)) +
geom_density()+
labs(title = "After Transformation")
# Loading packages
pacman::p_load(tidyverse, brms, here)
# Load results dataframe
results <- read_csv("./data/agg_results_2009_2021.csv") %>%
# Creating date variable
mutate(
Date = str_replace(month_year_id, "_", "-"),
Date = as.Date(paste0(Date, "-01"))
)
######## Preprocessing #########3
# Agregating results into a single data frame - VERY MESSY i know
agg <- results %>% group_by(Parti, Date) %>% arrange(-overlap_score, .by_group = TRUE) %>% slice(1:3) %>%
summarise(overlap_score = mean(overlap_score),
difference_score = mean(difference_score))
agg <- left_join(x = agg, y = results %>% select(c(Parti, Date, mean_theta, sd_theta)), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
# Load results dataframe
results <- read_csv("./data/agg_results_2009_2021.csv") %>%
# Creating date variable
mutate(
Date = str_replace(month_year_id, "_", "-"),
Date = as.Date(paste0(Date, "-01"))
)
######## Preprocessing #########3
# Agregating results into a single data frame - VERY MESSY i know
agg <- results %>% group_by(Parti, Date) %>% arrange(-overlap_score, .by_group = TRUE) %>% slice(1:3) %>%
summarise(overlap_score = mean(overlap_score),
difference_score = mean(difference_score))
agg <- left_join(x = agg, y = results %>% select(c(Parti, Date, mean_theta, sd_theta)), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
# Load results dataframe
results <- read_csv("./data/agg_results_2009_2021.csv") %>%
# Creating date variable
mutate(
Date = str_replace(month_year_id, "_", "-"),
Date = as.Date(paste0(Date, "-01"))
)
######## Preprocessing #########3
# Agregating results into a single data frame - VERY MESSY i know
agg <- results %>% group_by(Parti, Date) %>% arrange(-overlap_score, .by_group = TRUE) %>% slice(1:3) %>%
summarise(overlap_score = mean(overlap_score),
difference_score = mean(difference_score))
agg <- left_join(x = agg, y = results %>% select(c(Parti, Date, mean_theta, sd_theta)), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
View(agg)
agg <- left_join(x = agg, y = results %>% select(c(Parti, Date, mean_theta, sd_theta)), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
agg <- left_join(x = agg, y = results %>% select(c(Parti, Date, mean_theta, sd_theta)), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
agg <- left_join(x = agg, y = results %>% select(c(Parti, Date, mean_theta, sd_theta)), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
agg <- left_join(x = agg, y = results %>% select(Parti, Date, mean_theta, sd_theta),
by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
results %>% select(Parti, Date, mean_theta, sd_theta)
results %>% select(Parti, Date, mean_theta, sd_theta)
# Loading packages
pacman::p_load(tidyverse, brms, here)
agg <- left_join(x = agg, y = results %>% select(Parti, Date, mean_theta, sd_theta),
by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
# Load results dataframe
results <- read_csv("./data/agg_results_2009_2021.csv") %>%
# Creating date variable
mutate(
Date = str_replace(month_year_id, "_", "-"),
Date = as.Date(paste0(Date, "-01"))
)
######## Preprocessing #########3
# Agregating results into a single data frame - VERY MESSY i know
agg <- results %>% group_by(Parti, Date) %>% arrange(-overlap_score, .by_group = TRUE) %>% slice(1:3) %>%
summarise(overlap_score = mean(overlap_score),
difference_score = mean(difference_score))
agg <- left_join(x = agg, y = results %>% select(Parti, Date, mean_theta, sd_theta),
by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
agg <- left_join(x = agg, y = results %>% dply::select(Parti, Date, mean_theta, sd_theta), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
agg <- left_join(x = agg, y = results %>% dplyr::select(Parti, Date, mean_theta, sd_theta), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
# Load results dataframe
results <- read_csv("./data/agg_results_2009_2021.csv") %>%
# Creating date variable
mutate(
Date = str_replace(month_year_id, "_", "-"),
Date = as.Date(paste0(Date, "-01"))
)
######## Preprocessing #########3
# Agregating results into a single data frame - VERY MESSY i know
agg <- results %>% group_by(Parti, Date) %>% arrange(-overlap_score, .by_group = TRUE) %>% slice(1:3) %>%
summarise(overlap_score = mean(overlap_score),
difference_score = mean(difference_score))
agg <- left_join(x = agg, y = results %>% dplyr::select(Parti, Date, mean_theta, sd_theta), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
# Adding a lag column for the predictors - difference_score and sd_theta
agg <- agg  %>%  mutate(
Inclusion = sd_theta,
Differentiation = difference_score
) %>% group_by(Parti) %>% mutate(
Lag_inclusion = lag(Inclusion),
Lag_differentiation = lag(Differentiation)
)
#checking out the outome variable
summary(agg$Inclusion)
ggplot(agg, aes(x = Inclusion)) +
geom_density()
#plotting the raw data
agg %>% group_by(Date) %>% summarise(Inclusion = mean(sd_theta),
Differentiation = mean(lag_difference_score)) %>% pivot_longer(cols = c("Inclusion", "Differentiation"), names_to = "Need") %>%
ggplot()+
aes(x = Date, y = value, color = Need)+
geom_line()+
geom_point()
###################### DEFINING MODEL AND MAKING PRIOR-PREDICTIVE CHECKS ######################
f1 <- bf(Inclusion ~ 1 + Lag_inclusion + Lag_differentiation + Lag_inclusion:Lag_differentiation + (1|Parti))
get_prior(f1, data = agg)
# Finding prior for random intercept
means <- agg %>% group_by(Parti, Date) %>% summarise(mean = mean(sd_theta),
sd = sd(sd_theta)) %>% summarise(mean_of_mean = mean(mean),
sd_of_mean = sd(mean))
mean(means$mean_of_mean)
# Mean of 0.4486
mean(means$sd_of_mean)
# sd of 0.2428
prior_m1 <- c(
prior(normal(0.4, 0.2), class = Intercept),
prior(normal(0, 0.2), class = b),
prior(normal(0.4486, 0.2428), class = sd),
prior(exponential(5), class = sigma)
)
# Running the model
m1_prior <- brm(
formula = f1,
data = na.omit(agg),
family = gaussian(),
prior = prior_m1,
sample_prior = "only",
chains = 1,
cores = 1,
backend = "cmdstanr"
#file = here("models", "m1_prior")
)
# Prior predictive check
pp_check(m1_prior, nsamples = 100)
ggplot(agg, aes(x = log(Inclusion))) +
geom_density()+
labs(title = "After Transformation")
plot(fitdist(log(df$Inclusion), "lnorm"))
plot(fitdist(df$Inclusion, "lnorm"))
############################ RUNNING THE MODEL WITH DATA  #####################################
# Running the model
m1 <- brm(
formula = f1,
data = na.omit(agg),
family = gaussian(),
prior = prior_m1,
sample_prior = T,
chains = 1,
cores = 1,
backend = "cmdstanr"#,
#file = here("models", "m1")
)
# Posterior predictive check
pp_check(m1, nsamples = 100)
#checking out the outome variable
ggplot(agg, aes(x = (log(Inclusion)))) +
geom_density()+
labs(title = "Before Transformation")
mean(log(Inclusion))
mean(log(agg$Inclusion))
sd(log(agg$Inclusion))
#checking out the outome variable
ggplot(agg, aes(x = (log(Inclusion)))) +
geom_density()+
labs(title = "Before Transformation")
hep <- log(agg$Inclusion)
View(agg)
# Load results dataframe
results <- read_csv("./data/agg_results_2009_2021.csv") %>%
# Creating date variable
mutate(
Date = str_replace(month_year_id, "_", "-"),
Date = as.Date(paste0(Date, "-01"))
)
######## Preprocessing #########3
# Agregating results into a single data frame - VERY MESSY i know
agg <- results %>% group_by(Parti, Date) %>% arrange(-overlap_score, .by_group = TRUE) %>% slice(1:3) %>%
summarise(overlap_score = mean(overlap_score),
difference_score = mean(difference_score))
agg <- left_join(x = agg, y = results %>% select(c(Parti, Date, mean_theta, sd_theta)), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
agg <- left_join(x = agg, y = results %>% dplyr::select(c(Parti, Date, mean_theta, sd_theta)), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
# Adding a lag column for the predictors - difference_score and sd_theta
agg <- agg  %>%  mutate(
Inclusion = sd_theta,
Differentiation = difference_score
) %>% group_by(Parti) %>% mutate(
Lag_inclusion = lag(Inclusion),
Lag_differentiation = lag(Differentiation)
) %>% ungroup
hep <- log(agg$Inclusion)
View(agg)
#checking out the outome variable
ggplot(agg, aes(x = Inclusion))) +
#checking out the outome variable
ggplot(agg, aes(x = Inclusion)) +
geom_density()+
labs(title = "Before Transformation")
hep <- na.omit(agg)
View(agg)
hep <- na.omit(agg) %>% filter(mean_theta != 0 & sd_theta != 0)
View(hep)
sd(log(hep$Inclusion))
mean(log(hep$Inclusion))
sd(log(hep$Inclusion))
mean(log(hep$Differentiation))
sd(log(hep$Differentiation))
ggplot(agg, aes(x = (Differentiation))) +
geom_density()+
labs(title = "Before Transformation")
# Loading packages
pacman::p_load(tidyverse, brms, here)
# Loading packages
pacman::p_load(tidyverse, brms, here)
# Load results dataframe
results <- read_csv("./data/agg_results_2009_2021.csv") %>%
# Creating date variable
mutate(
Date = str_replace(month_year_id, "_", "-"),
Date = as.Date(paste0(Date, "-01"))
)
######## Preprocessing #########3
# Agregating results into a single data frame - VERY MESSY i know
agg <- results %>% group_by(Parti, Date) %>% arrange(-overlap_score, .by_group = TRUE) %>% slice(1:3) %>%
summarise(overlap_score = mean(overlap_score),
difference_score = mean(difference_score))
agg <- left_join(x = agg, y = results %>% dplyr::select(Parti, Date, mean_theta, sd_theta), by = c("Parti" = "Parti", "Date" = "Date")) %>% group_by(Parti, Date) %>% slice(1) %>% ungroup()
# Adding a lag column for the predictors - difference_score and sd_theta
agg <- agg  %>%  mutate(
Inclusion = sd_theta,
Differentiation = difference_score
) %>% group_by(Parti) %>% mutate(
Lag_inclusion = lag(Inclusion),
Lag_differentiation = lag(Differentiation)
)
# Removing NA and 0 values
agg <- na.omit(agg) %>% filter(mean_theta != 0 & sd_theta != 0)
#checking out the outome variable
summary(agg$Inclusion)
ggplot(agg, aes(x = Inclusion)) +
geom_density()
#plotting the raw data
agg %>% group_by(Date) %>% summarise(Inclusion = mean(sd_theta),
Differentiation = mean(lag_difference_score)) %>% pivot_longer(cols = c("Inclusion", "Differentiation"), names_to = "Need") %>%
ggplot()+
aes(x = Date, y = value, color = Need)+
geom_line()+
geom_point()
f1 <- bf(Inclusion ~ 1 + Lag_inclusion + Lag_differentiation + Lag_inclusion:Lag_differentiation + (1|Parti))
get_prior(f1, data = agg)
# Finding prior for random intercept
means <- agg %>% group_by(Parti, Date) %>% summarise(mean = mean(sd_theta),
sd = sd(sd_theta)) %>% summarise(mean_of_mean = mean(mean),
sd_of_mean = sd(mean))
mean(means$mean_of_mean)
mean(means$sd_of_mean)
get_prior(f1, data = agg)
f1 <- bf(Inclusion ~ 1 + Lag_inclusion + Lag_differentiation + Lag_inclusion:Lag_differentiation + (1|Parti), family = lognormal())
get_prior(f1, data = agg)
prior_m1 <- c(
prior(normal(-0.8766658, 0.2), class = Intercept),
prior(normal(0, 0.2), class = b),
prior(normal(0.4486, 0.2428), class = sd),
prior(normal(0.5761837, 0.2), class = sigma)
)
# Running the model
m1_prior <- brm(
formula = f1,
data = na.omit(agg),
family = lognormal(),
prior = prior_m1,
sample_prior = "only",
chains = 1,
cores = 1,
backend = "cmdstanr"
#file = here("models", "m1_prior")
)
# Prior predictive check
pp_check(m1_prior, nsamples = 100)
# Prior predictive check
pp_check(m1_prior, nsamples = 100)
```{r}
# Prior predictive check
pp_check(m1_prior, nsamples = 100)
############################ RUNNING THE MODEL WITH DATA  #####################################
# Running the model
m1 <- brm(
formula = f1,
data = na.omit(agg),
family = gaussian(),
prior = prior_m1,
sample_prior = T,
chains = 1,
cores = 1,
backend = "cmdstanr"#,
#file = here("models", "m1")
)
# Posterior predictive check
pp_check(m1, nsamples = 100)
###################### DEFINING MODEL AND MAKING PRIOR-PREDICTIVE CHECKS ######################
f2 <- bf(Differentiation ~ 1 + Lag_differentiation +  Lag_inclusion + Lag_differentiation:Lag_inclusion + (1|Parti), family = lognormal())
get_prior(f2, data = agg)
# Finding prior for random intercept
means <- agg %>% group_by(Parti, Date) %>% summarise(mean = mean(sd_theta),
sd = sd(sd_theta)) %>% summarise(mean_of_mean = mean(mean),
sd_of_mean = sd(mean))
mean(means$mean_of_mean)
# Mean of 0.4606071
mean(means$sd_of_mean)
# sd of 0.2353983
prior_m2 <- c(
prior(normal(-1.074466, 0.2), class = Intercept),
prior(normal(0, 0.2), class = b),
prior(normal(0.4486, 0.2428), class = sd),
prior(normal(0.3637625, 0.2), class = sigma)
)
# Running the model
m2_prior <- brm(
formula = f2,
data = na.omit(agg),
family = lognormal(),
prior = prior_m2,
sample_prior = "only",
chains = 1,
cores = 1,
backend = "cmdstanr"
#file = here("models", "m2_prior")
)
# Prior predictive check
pp_check(m1_prior, nsamples = 100)
# Prior predictive check
pp_check(m2_prior, nsamples = 100)
############################ RUNNING THE MODEL WITH DATA  #####################################
# Running the model
m2 <- brm(
formula = f2,
data = na.omit(agg),
family = gaussian(),
prior = prior_m2,
sample_prior = T,
chains = 1,
cores = 1,
backend = "cmdstanr"#,
#file = here("models", "m1")
)
# Posterior predictive check
pp_check(m2, nsamples = 100)
#checking out the outome variable
ggplot(agg, aes(x = Inclusion)) +
geom_density()+
labs(title = "Before Transformation")
ggplot(agg, aes(x = log(Inclusion))) +
geom_density()+
labs(title = "After Transformation")
ggplot(agg, aes(x = Differentiation)) +
geom_density()+
labs(title = "Before Transformation")
ggplot(x, aes(x = log(Differentiation))) +
geom_density()+
labs(title = "After Transformation")
#checking out the outome variable
ggplot(agg, aes(x = Inclusion)) +
geom_density()+
labs(title = "Before Transformation")
ggplot(agg, aes(x = log(Inclusion))) +
geom_density()+
labs(title = "After Transformation")
ggplot(agg, aes(x = Differentiation)) +
geom_density()+
labs(title = "Before Transformation")
ggplot(agg, aes(x = log(Differentiation))) +
geom_density()+
labs(title = "After Transformation")
summary(m2)
# Diagnostics
# Summary output
print(m1)
#---------------------------------prior-posterior update------------------------
#Prior posterior update checks
m1_samples <- posterior_samples(m1)
m1_samples %>%
select(c("b_Lag_inclusion", "b_Lag_differentiation", "b_Lag_inclusion:Lag_differentiation", "sd_Parti__Intercept", "sigma", "Intercept",
"prior_Intercept", "prior_b", "prior_sd_Parti", "prior_sigma")) %>%
rename(
b_lagInclusion = b_Lag_inclusion,
b_lagDifferentiation = b_Lag_differentiation,
b_Interaction = "b_Lag_inclusion:Lag_differentiation",
b_sdParti = sd_Parti__Intercept,
b_sigma = sigma,
b_Intercept = Intercept,
prior_Intercept = prior_Intercept,
prior_sdParti = prior_sd_Parti,
) %>%
mutate(
prior_lagInclusion = prior_b,
prior_lagDifferentiation = prior_b,
prior_Interaction = prior_b
) %>% select(-prior_b) %>%
pivot_longer(cols = everything(),
values_to = "value",
names_to = "distribution"
) %>%
separate(distribution, c("Distribution", "Parameter"), sep = "_") %>%
mutate(Distribution = ifelse(Distribution == "b", "Posterior", "Prior")) %>%
ggplot(aes(x = value, fill = Distribution)) +
geom_density(alpha = 0.8) +
facet_wrap(~Parameter, nrow = 4) +
labs(title = "Prior-posterior updates")+
theme_bw()+
scale_fill_manual(values = wesanderson::wes_palette(name = "Darjeeling1")) +
theme(strip.text = element_text(size=15),
axis.title=element_text(size=15),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)) +
xlim(-1,1)
df <- agg %>% filter(Parti == "Dansk Folkeparti") %>% dply::select(Date, Inclusion, Differentiation)
