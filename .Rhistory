set.seed(123)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text)
# assign rater
samples$who <- ifelse(samples$id %in% ((sample(samples$id, nrow(samples)/2))), "Morten", "Gustav")
samples %>% group_by(who) %>% count()
# sample ~200 values across different years
set.seed(124)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text)
# assign rater
samples$who <- ifelse(samples$id %in% ((sample(samples$id, nrow(samples)/2))), "Morten", "Gustav")
samples %>% group_by(who) %>% count()
length((sample(samples$id, nrow(samples)/2)))
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text, doc_id)
# assign rater
samples$who <- ifelse(samples$id %in% ((sample(samples$doc_id, nrow(samples)/2))), "Morten", "Gustav")
samples %>% group_by(who) %>% count()
# assign rater
samples$who <- ifelse(samples$doc_id %in% ((sample(samples$doc_id, nrow(samples)/2))), "Morten", "Gustav")
samples %>% group_by(who) %>% count()
View(samples)
paste0(n, " hej")
# sample ~200 values across different years
set.seed(124)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text, doc_id, year)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text, doc_id, Year)
# assign rater
samples$who <- ifelse(samples$doc_id %in% ((sample(samples$doc_id, nrow(samples)/2))), "Morten", "Gustav")
samples %>% group_by(who) %>% count()
paste0(nrows(samples), "_", max(samples$Year, "_", min(samples$Year)))
paste0(nrow(samples), "_", max(samples$Year, "_", min(samples$Year)))
View(samples)
min(samples$Year)
paste0(nrow(samples), "_", max(samples$Year), "_", min(samples$Year)))
paste0(nrow(samples), "_", max(samples$Year), "_", min(samples$Year))
paste0(nrow(samples), "_", min(samples$Year), "_", max(samples$Year))
paste0("samples", nrow(samples), "_", min(samples$Year), "_", max(samples$Year))
paste0("samples_", nrow(samples), "_", min(samples$Year), "_", max(samples$Year))
paste0(nrow(samples), "_samples_", min(samples$Year), "-", max(samples$Year))
?write_csv
write_csv(x = samples, file = paste0("./data/", nrow(samples), "_samples_", min(samples$Year), "-", max(samples$Year)))
write_csv(x = samples, file = paste0("./data/", nrow(samples), "_samples_", min(samples$Year), "-", max(samples$Year), ".csv"))
library(tidyverse, dplyr)
df <- read_csv("./data/195_samples_2009-2021.csv") %>% filter(who == "Morten")
gustav <- read_csv("./data/195_samples_2009-2021.csv") %>% filter(who == "Gustav")
morten <- read_csv("./data/195_samples_2009-2021.csv") %>% filter(who == "Morten")
View(morten)
doc_ids <- morten$doc_id %>% sort()
doc_ids
ids <- morten$id %>% sort()
ids
split = readline(prompt = paste0("is ", n, " split correctly?"))
docidddd <- 123
docidddd <- "123"
split <- "yes"
assignment <- "no"
assessment_results <- data.frame()
?rbind
row <- c(docidddd, split, assignment)
rbind(assessment_results, row)
View(assessment_results)
rbind(assessment_results, row)
assessment_results <- rbind(assessment_results, row)
View(assessment_results)
assessment_results <- data.frame("doc_id")
View(assessment_results)
setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
View(assessment_results)
assessment_results <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
View(data)
View(assessment_results)
assessment_results <- rbind(assessment_results, row)
View(assessment_results)
?rbind
ratings[nrow(ratings)+1,] <- row
ratings <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
row <- c(docidddd, split, assignment)
ratings[nrow(ratings)+1,] <- row
View(ratings)
morten <- read_csv("./data/195_samples_2009-2021.csv") %>% filter(who == "Morten") %>% slice(1:3)
doc_ids <- morten$doc_id %>% sort()
assessment <- function(doc_id){
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
split = readline(prompt = paste0("Is ", doc_id, " split correctly?"))
assignment = readline(prompt = paste0("Is ", doc_id, " split correctly?"))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <- row
i = i + 1
}
assessment <- function(doc_id){
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
split = readline(prompt = paste0("Is ", doc_id, " split correctly?"))
assignment = readline(prompt = paste0("Is ", doc_id, " split correctly?"))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <- row
i = i + 1
}
?map
map(.f = assessment, .x = doc_ids)
i = 1
assessment <- function(doc_id){
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly?"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly?"))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <- row
i = i + 1
}
i = 1
map(.f = assessment, .x = doc_ids)
View(ratings)
assessment <- function(doc_id){
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly?"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly?"))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <- row
i = i + 1
}
i = 1
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
map(.f = assessment, .x = doc_ids)
assessment <- function(doc_id){
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly?"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly?"))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <<- row
i = i + 1
}
i = 1
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
map(.f = assessment, .x = doc_ids)
View(ratings)
assessment <- function(doc_id){
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly ?"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <<- row
i = i + 1
}
i = 1
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
map(.f = assessment, .x = doc_ids)
assessment <- function(doc_id){
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <<- row
i = i + 1
}
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
map(.f = assessment, .x = doc_ids)
View(results)
View(ratings)
hep <- map(.f = assessment, .x = doc_ids)
View(hep)
hep <- hep %>% unnest()
class(hep)
hep[1]
get_prior(f1, data = agg)
get_prior(f1, data = agg)
###################################################### MORTEN ######################################################
morten <- read_csv("./data/195_samples_2009-2021.csv") %>% filter(who == "Morten") %>% slice(1:3)
morten_ids <- morten$doc_id %>% sort()
assessment <- function(doc_id){
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <<- row
i = i + 1
}
i = 1
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
map(.f = assessment, .x = doc_ids)
# join by doc_id at the end
# i would like there to be an argument for df...
View(ratings)
View(morten)
library(tidyverse)
library(lubridate)
# library(udpipe)
library(stopwords)
library(groupdata2)
library(fuzzyjoin)
data3 <- read_csv("./data3_temp.csv")
############## ------------------ REMOVE WHEN DONE ------------------- ####################
##### CHECKING SIILAR NAMES #####
# Creating stringdist matrix for restaurant names
distmatrix<-stringdist::stringdistmatrix(unique(data3$Name),unique(data3$Name), useNames=TRUE ,method = "osa")
# Converting to dataframe
distmatrixdf<- as.data.frame(distmatrix)
# Making a row with restaurant names
distmatrixdf$Restaurant_Name <- rownames(distmatrixdf)
# Filtering out all links with less than 5 in distance and eyeballing the results to decide what links to merge
dist <- distmatrixdf %>%
pivot_longer(cols = everything(vars = distmatrixdf$Restaurant_Name)) %>%
filter(value != 0)
View(dist)
list_of_names <- data.frame(Name = unique(data3$Name))
View(list_of_names)
# Filtering out all links with less than 5 in distance and eyeballing the results to decide what links to merge
dist <- distmatrixdf %>%
pivot_longer(cols = everything(vars = distmatrixdf$Restaurant_Name)) %>%
filter(value <= 5 & value != 0)
View(dist)
?str_detect
############## ------------------ REMOVE WHEN DONE ------------------- ####################
##### CHECKING SIILAR NAMES #####
# Creating stringdist matrix for restaurant names
data3 <- data3 %>% filter(YEAR %in% seq(2000, 2021))
############## ------------------ REMOVE WHEN DONE ------------------- ####################
##### CHECKING SIILAR NAMES #####
# Creating stringdist matrix for restaurant names
data3 <- data3 %>% filter(Year %in% seq(2000, 2021))
distmatrix<-stringdist::stringdistmatrix(unique(data3$Name),unique(data3$Name), useNames=TRUE ,method = "osa")
# Converting to dataframe
distmatrixdf<- as.data.frame(distmatrix)
# Making a row with restaurant names
distmatrixdf$Restaurant_Name <- rownames(distmatrixdf)
# Filtering out all links with less than 5 in distance and eyeballing the results to decide what links to merge
dist <- distmatrixdf %>%
pivot_longer(cols = everything(vars = distmatrixdf$Restaurant_Name)) %>%
filter(value <= 5 & value != 0)
list_of_names <- data.frame(Name = unique(data3$Name))
View(dist)
View(dist)
View(list_of_names)
test <- data3 %>% group_by(Name) %>% count()
View(test)
# Creating stringdist matrix for restaurant names
data3 <- data3 %>% group_by(Name) %>% filter(n() >= 10) %>% ungroup()
data3 <- read_csv("./data3_temp.csv")
# Creating stringdist matrix for restaurant names
data3 <- data3 %>% group_by(Name) %>% filter(n() >= 10) %>% ungroup()
distmatrix <- stringdist::stringdistmatrix(unique(data3$Name),unique(data3$Name), useNames=TRUE ,method = "osa")
# Converting to dataframe
distmatrixdf<- as.data.frame(distmatrix)
# Making a row with restaurant names
distmatrixdf$Name <- rownames(distmatrixdf)
# Filtering out all links with less than 5 in distance and eyeballing the results to decide what links to merge
dist <- distmatrixdf %>%
pivot_longer(cols = everything(vars = distmatrixdf$Name)) %>%
filter(value <= 5 & value != 0)
hep <- hep %>% group_by(Name) %>% count()
hej <- left_join(dist, hep) %>% rename(n_left = n)
hh <- hep %>% rename(name = Name)
huj <- left_join(hej, hh) %>% rename(n_right = n)
View(huj)
hep <- data3 %>% group_by(Name) %>% count()
hej <- left_join(dist, hep) %>% rename(n_left = n)
hh <- hep %>% rename(name = Name)
huj <- left_join(hej, hh) %>% rename(n_right = n)
View(huj)
list_of_names <- data.frame(Name = unique(data3$Name))
View(list_of_names)
View(hep)
# Importing data
#csv_files = list.files(pattern="*.csv", path = "data/wordshoal_results/", full.names = T)
#df = map_df(csv_files, read_csv)
ws_df <- read_csv("./data/wordshoal_results/wordshoal_estimates_2019_2019.csv")
# loading packages
pacman::p_load(tidyverse,stringdist, ggplot2, lubridate)
# Color pallette
pal <- wesanderson::wes_palette("Darjeeling1", 16, type = "continuous")
# Importing data
#csv_files = list.files(pattern="*.csv", path = "data/wordshoal_results/", full.names = T)
#df = map_df(csv_files, read_csv)
ws_df <- read_csv("./data/wordshoal_results/wordshoal_estimates_2019_2019.csv")
# Importing data
#csv_files = list.files(pattern="*.csv", path = "data/wordshoal_results/", full.names = T)
#df = map_df(csv_files, read_csv)
ws_df <- read_csv("./data/wordshoal_results/wordshoal_estimates_2019_2019.csv")
# Importing data
#csv_files = list.files(pattern="*.csv", path = "data/wordshoal_results/", full.names = T)
#df = map_df(csv_files, read_csv)
ws_df <- read_csv("./data/wordshoal_results/wordshoal_estimates_2018_2021.csv")
raw_df <- read_csv("./data/folketinget_2009_2021_raw.csv")
# Mean position and sd of position per month and party
agg <- ws_df %>% group_by(Parti, Month) %>% summarise(mean = mean(theta), sd = sd(theta)) %>% drop_na(sd)
View(ws_df)
# Mean position and sd of position per month and party
#agg <- ws_df %>% group_by(Parti, Month) %>% summarise(mean = mean(theta), sd = sd(theta)) %>% drop_na(sd)
agg <- ws_df %>% group_by(Parti, month_year_id) %>% summarise(mean = mean(theta), sd = sd(theta)) %>% drop_na(sd)
# Mean position of each member grouped by party
ws_df %>% group_by(row_names) %>% summarise(Parti = Parti, mean_theta = mean(theta)) %>% filter(!duplicated(mean_theta)) %>% filter(!row_names %in% c("Thor Pedersen", "Anders Fogh Rasmussen", "Søren Gade")) %>%
ggplot()+
aes(x = mean_theta, y = Parti, color = Parti)+
geom_point()+
scale_color_manual(values = wesanderson::wes_palette("Darjeeling1", 10, type = "continuous"))+
labs(title = "Wordshoal - Mean estimated position of each member divided by party", x = "Estimated position", y ="")+
theme(legend.position = "none")
# loading packages
pacman::p_load(tidyverse,stringdist, overlapping, lubridate)
# Importing data
df <- read_csv("data/folketinget_2009_2021_raw.csv") %>% filter(Year %in% c(2019, 2020))
# Color pallette
pal <- wesanderson::wes_palette("Darjeeling1", 14, type = "continuous")
# Setting up the theme
theme_set(theme_minimal())
# Loading the results
#csv_files = list.files(pattern="*.csv", path = "data/wordshoal_results/", full.names = T)
#df = map_df(csv_files, read_csv)
df_ws <- read_csv("./data/wordshoal_results/wordshoal_estimates_2018_2021.csv")
# FUNCTION
overlapper <- function(period){
# Printing status
print(paste0("[ ] Calculating overlaps for month: ", period, ". Number: ", i, " out of ", as.character(length(unique(df$Month)))))
# Subsetting the period and filtering out parties that only has 1 speech in a month
subset <- df %>% filter(Month == period) %>% group_by(Parti) %>% filter(n() > 1) %>% ungroup()
# Only continue if there is more than one party with more than one speech
if(length(unique(subset$Parti)) > 1){
# Making a list of parties
parties <- unique(subset$Parti)
# Converting into wide format
wide <- subset %>% pivot_wider(names_from = Parti, values_from = theta)
# Creating an empty list
list <- list()
# Adding the parties to the list
for(party in parties){
list <- append(list,na.omit(select(wide, party)))
}
# Calculating the overlaps
overlaps <- overlap(list)
# Wringling the data
results <- data.frame(overlaps$OV) %>% rownames_to_column("Parties") %>%
separate(Parties, c("From","To"), "-")
# Making an empty data frame to append to
end_results = data_frame()
# Wrangling the result data frame
for(party in parties){
hep <- results %>% filter(From == party | To == party) %>% mutate(
copy_from = From,
From = ifelse(From == party, From, To),
To = ifelse(To == party, copy_from, To)
) %>% select(-copy_from)
end_results <- rbind(end_results, hep)
}
# Adding month_year_id variable
end_results$Month <- period
i <<- i + 1
return(end_results)
}
}
View(df_ws)
knitr::opts_chunk$set(echo = TRUE)
morten <- read_csv("./data/samples_morten.csv")
# packages
library(tidyverse, dplyr, stringdist)
# packages
library(tidyverse, dplyr, stringdist)
# packages
pacman::p_load(tidyverse, dplyr, stringdist)
morten <- read_csv("./data/samples_morten.csv")
morten$doc_id
cat(morten$text[doc_id == 37207])
View(morten)
cat(morten$text[morten$doc_id == 37207])
morten$doc_id
cat(morten$text[morten$doc_id == 81436])
cat(paste0("text: \n -------------------------------- ", morten$text[morten$doc_id == 81436]), "\n ---------------------------\n")
cat(paste0("text: \n \n -------------------------------- ", morten$text[morten$doc_id == 81436]), "\n ---------------------------\n")
cat(paste0("text: \n \n -------------------------------- \n ", morten$text[morten$doc_id == 81436]), "\n ---------------------------\n")
cat(paste0("text: \n \n -------------------------------- \n ", morten$text[morten$doc_id == 81436]), "\n --------------------------------\n")
cat(paste0("text: \n \n ---------------------------------------------------------------- \n ", morten$text[morten$doc_id == 81436]), "\n ----------------------------------------------------------------\n")
cat(replicate("-", 10))
cat(replicate(10, "-"))
cat(paste0("text:\n\n", replicate("-", 100), "\n", morten$text[morten$doc_id == 81436]), "\n", replicate("-", 100), "\n")
cat(paste0("text:\n\n", replicate(100, "-"), "\n", morten$text[morten$doc_id == 81436]), "\n", replicate(100, "-"), "\n")
cat(paste0("text:\n\n", replicate(10, "-"), "\n", morten$text[morten$doc_id == 81436]), "\n", replicate(10, "-"), "\n")
cat(replicate(10, "-"))
cat(paste0("text:\n\n", replicate(10, '-'), "\n", morten$text[morten$doc_id == 81436]), "\n", replicate(10, "-"), "\n")
cat(paste0("text: \n \n ---------------------------------------------------------------- \n ", morten$text[morten$doc_id == 81436]), "\n ----------------------------------------------------------------\n")
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text, doc_id, Year, Name)
# packages
#pacman::p_load(tidyverse, dplyr, stringdist)
library(tidyverse, dplyr, stringdist)
# load data
data <- read_csv("./data/folketinget_1990_2021_raw.csv")
# sample ~200 values across different years
set.seed(124)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text, doc_id, Year, Name)
# assign rater
samples$who <- ifelse(samples$doc_id %in% ((sample(samples$doc_id, nrow(samples)/2))), "Morten", "Gustav")
############################################### MORTEN RATING ######################################################
morten <- samples %>% filter(who == "Morten")
cat(paste0("Assigned to: ", morten$Name[morten$doc_id == 81436], "\n"))
assessment <- function(df){
# list of ids
ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(id in ids){
cat(paste0("text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", id, " assigned correctly? "))
row <- data.frame(doc_id = id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
assessment <- function(df){
# list of ids
ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id]))
cat(paste0("\n text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id]))
cat(paste0("\n text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id]))
cat(paste0("\n text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id]))
cat(paste0("Text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
assessment <- function(df){
# list of ids
doc_ids <- df$doc_id %>% sort()
# Empty data frame
ratings <- data.frame(doc_id = as.character(), split = as.character(), assignment = as.character())
# Loop through ids
for(doc_id in doc_ids){
cat(paste0("PDF name: ", df$id[df$doc_id == doc_id], "\n"))
cat(paste0("Text: \n \n ---------------------------------------------------------------- \n ",
df$text[df$doc_id == doc_id]), "\n ----------------------------------------------------------------\n")
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
cat(paste0("Assigned to: ", df$Name[df$doc_id == doc_id], "\n"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- data.frame(doc_id = doc_id, split = split, assignment = assignment)
ratings <- rbind(ratings, row)
}
return(ratings)
}
morten_ratings <- assessment(df = morten)
gustav <- samples %>% filter(who == "Gustav")
write.csv(gustav, "./data/samples_gustav.csv")
morten <- samples %>% filter(who == "Morten")
write.csv(morten, "./data/samples_morten.csv")
morten <- read_csv("./data/samples_morten.csv")
gustav <- read_csv("./data/samples_gustav.csv")
gustav_ratings <- assessment(df = gustav)
knitr::opts_chunk$set(echo = TRUE)
gustav <- read_csv("./data/samples_gustav.csv")
# packages
pacman::p_load(tidyverse, dplyr, stringdist)
morten <- read_csv("./data/samples_morten.csv")
gustav <- read_csv("./data/samples_gustav.csv")
lapply(morten$id, write, "morten_pdf.txt", append=TRUE)
lapply(gustav$id, write, "gustav_pdf.txt", append=TRUE)
