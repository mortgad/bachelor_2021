f1 <- bf(Inclusion ~ 1 + Lag_inclusion + Lag_differentiation + Lag_inclusion:Lag_differentiation + (1|Parti), family = lognormal())
get_prior(f1, data = agg)
# Finding prior for random intercept
means <- agg %>% group_by(Parti, Date) %>% summarise(mean = mean(sd_theta),
sd = sd(sd_theta)) %>% summarise(mean_of_mean = mean(mean),
sd_of_mean = sd(mean))
sd(agg$Inclusion)
mean(means$mean_of_mean)
# Mean of 0.4606071
mean(means$sd_of_mean)
# sd of 0.2353983
prior_m1 <- c(
prior(normal(-0.8766658, 0.2), class = Intercept),
prior(normal(0, 0.2), class = b),
prior(normal(0.4486, 0.2428), class = sd),
prior(normal(0.5761837, 0.2), class = sigma)
)
# Running the model
m1_prior <- brm(
formula = f1,
data = na.omit(agg),
family = lognormal(),
prior = prior_m1,
sample_prior = "only",
chains = 1,
cores = 1,
backend = "cmdstanr"
#file = here("models", "m1_prior")
)
rebuild_cmdstan()
rebuild_cmdstan()
rebuild_cmdstan()
??rebuild_cmdstan()
brms::rebuild_cmdstan)=
brms::rebuild_cmdstan()
install_cmdstan()
# Loading packages
pacman::p_load(tidyverse, brms, here, patchwork)
# Loading packages
pacman::p_load(tidyverse, brms, here, patchwork, cmdstanr)
rebuild_cmdstan()
###################### DEFINING MODEL AND MAKING PRIOR-PREDICTIVE CHECKS ######################
f1 <- bf(Inclusion ~ 1 + Lag_inclusion + Lag_differentiation + Lag_inclusion:Lag_differentiation + (1|Parti), family = lognormal())
get_prior(f1, data = agg)
# Finding prior for random intercept
means <- agg %>% group_by(Parti, Date) %>% summarise(mean = mean(sd_theta),
sd = sd(sd_theta)) %>% summarise(mean_of_mean = mean(mean),
sd_of_mean = sd(mean))
sd(agg$Inclusion)
mean(means$mean_of_mean)
# Mean of 0.4606071
mean(means$sd_of_mean)
# sd of 0.2353983
prior_m1 <- c(
prior(normal(-0.8766658, 0.2), class = Intercept),
prior(normal(0, 0.2), class = b),
prior(normal(0.4486, 0.2428), class = sd),
prior(normal(0.5761837, 0.2), class = sigma)
)
# Running the model
m1_prior <- brm(
formula = f1,
data = na.omit(agg),
family = lognormal(),
prior = prior_m1,
sample_prior = "only",
chains = 1,
cores = 1,
backend = "cmdstanr"
#file = here("models", "m1_prior")
)
# Prior predictive check
pp_check(m1_prior, nsamples = 100)
###################### DEFINING MODEL AND MAKING PRIOR-PREDICTIVE CHECKS ######################
f2 <- bf(Differentiation ~ 1 + Lag_differentiation +  Lag_inclusion + Lag_differentiation:Lag_inclusion + (1|Parti), family = lognormal())
get_prior(f2, data = agg)
# Finding prior for random intercept
means <- agg %>% group_by(Parti, Date) %>% summarise(mean = mean(sd_theta),
sd = sd(sd_theta)) %>% summarise(mean_of_mean = mean(mean),
sd_of_mean = sd(mean))
mean(means$mean_of_mean)
# Mean of 0.4606071
mean(means$sd_of_mean)
# sd of 0.2353983
prior_m2 <- c(
prior(normal(-1.074466, 0.2), class = Intercept),
prior(normal(0, 0.2), class = b),
prior(normal(0.4486, 0.2428), class = sd),
prior(normal(0.3637625, 0.2), class = sigma)
)
# Running the model
m2_prior <- brm(
formula = f2,
data = na.omit(agg),
family = lognormal(),
prior = prior_m2,
sample_prior = "only",
chains = 1,
cores = 1,
backend = "cmdstanr"
#file = here("models", "m2_prior")
)
# Prior predictive check
pp_check(m2_prior, nsamples = 100)
#checking out the outome variable
p1 <- ggplot(agg, aes(x = Inclusion)) +
geom_density()+
geom_vline(xintercept = mean(agg$Inclusion), size=0.5, color="red", linetype = "dashed")+
geom_text(aes(x=mean(agg$Inclusion)+0.4, label=paste0("Mean ",round(mean(Inclusion), digits = 2)), y=1.5), size = 3)
p2 <- ggplot(agg, aes(x = log(Inclusion))) +
geom_density()+
geom_vline(xintercept = mean(log(agg$Inclusion)), size=0.5, color="red", linetype = "dashed")+
geom_text(aes(x=mean(log(agg$Inclusion))+0.8, label=paste0("Mean ",round(mean(log(Inclusion)), digits = 2)), y=0.75), size = 3)
p3 <- ggplot(agg, aes(x = Differentiation)) +
geom_density()+
geom_vline(xintercept = mean(agg$Differentiation), size=0.5, color="red", linetype = "dashed")+
geom_text(aes(x=mean(agg$Differentiation)+0.12, label=paste0("Mean ",round(mean(Differentiation), digits = 2)), y=3), size = 3)
p4 <- ggplot(agg, aes(x = log(Differentiation))) +
geom_density()+
geom_vline(xintercept = mean(log(agg$Differentiation)), size=0.5, color="red", linetype = "dashed")+
geom_text(aes(x=mean(log(agg$Differentiation))+0.3, label=paste0("Mean ",round(mean(log(Differentiation)), digits = 2)), y=0.9), size = 3)
(p1 + p2) / (p3 + p4) + plot_annotation(title = "Density plot of variables with and without transformation")
?brm
?bf
sd(agg$Inclusion)
mean(agg$Inclusion)
?prior
prior_m1 <- c(
prior(normal(0.48, 0.2), class = Intercept, lb = 0),
prior(normal(0, 0.2), class = b),
prior(normal(0.4486, 0.2428), class = sd),
prior(normal(0.5761837, 0.2), class = sigma)
)
###################### DEFINING MODEL AND MAKING PRIOR-PREDICTIVE CHECKS ######################
f1 <- bf(Inclusion ~ 1 + Lag_inclusion + Lag_differentiation + Lag_inclusion:Lag_differentiation + (1|Parti), family = lognormal())
get_prior(f1, data = agg)
# Finding prior for random intercept
means <- agg %>% group_by(Parti, Date) %>% summarise(mean = mean(sd_theta),
sd = sd(sd_theta)) %>% summarise(mean_of_mean = mean(mean),
sd_of_mean = sd(mean))
sd(agg$Inclusion)
mean(means$mean_of_mean)
# Mean of 0.4606071
mean(means$sd_of_mean)
# sd of 0.2353983
prior_m1 <- c(
prior(normal(-0.8766658, 0.2), class = Intercept),
prior(normal(0, 0.2), class = b),
prior(normal(0.4486, 0.2428), class = sd),
prior(normal(0.5761837, 0.2), class = sigma)
)
# Running the model
m1_prior <- brm(
formula = f1,
data = na.omit(agg),
family = lognormal(),
prior = prior_m1,
sample_prior = "only",
chains = 1,
cores = 1,
backend = "cmdstanr"
#file = here("models", "m1_prior")
)
# Prior predictive check
pp_check(m1_prior, nsamples = 100)
############################ RUNNING THE MODEL WITH DATA  #####################################
# Running the model
m1 <- brm(
formula = f1,
data = na.omit(agg),
family = gaussian(),
prior = prior_m1,
sample_prior = T,
chains = 1,
cores = 1,
backend = "cmdstanr"#,
#file = here("models", "m1")
)
# Posterior predictive check
pp_check(m1, nsamples = 100)
# Diagnostics
# Summary output
print(m1)
View(agg)
sd(agg$mean_theta)
View(means)
View(agg)
sd(agg$sd_theta)
View(means)
sd(agg$sd_theta)
sd(means$mean_of_mean)
sd(means$sd_of_mean)
View(agg)
hejsa <- agg %>% group_by(Parti, Date) %>% summarise(mean = mean(sd_theta))
View(hejsa)
View(hejsa)
hejsa <- agg %>% group_by(Parti, Date) %>% summarise(n = n())
View(hejsa)
agg %>% group_by(Parti, Date) %>% summarise(n())
hejsa <- agg %>% group_by(Parti, Date) %>% summarise(sd = sd(sd_theta))
View(hejsa)
hejsa <- agg %>% group_by(Parti) %>% summarise(sd = sd(sd_theta))
View(hejsa)
hejsa <- agg %>% group_by(Parti) %>% summarise(mean = mean(sd_theta)) %>% summarise(mean_of_mean = mean(mean))
View(hejsa)
# Finding prior for random intercept
means <- agg %>% group_by(Parti, Date) %>% summarise(mean = mean(sd_theta), # does not make sense to me, group size equals 1 for all groups
sd = sd(sd_theta)) %>% summarise(mean_of_mean = mean(mean), # what about sd(sd_theta)?
sd_of_mean = sd(mean)) # we dont seem to use sd of theta
View(means)
hejsa <- agg %>% group_by(Parti) %>% summarise(mean = mean(sd_theta)) %>% summarise(mean_of_mean = mean(mean),
sd_of_mean = sd(mean))
View(hejsa)
hejsa <- agg %>% group_by(Parti) %>% summarise(mean = mean(sd_theta),
sd = sd(sd_theta)) %>% summarise(mean_of_mean = mean(mean),
mean_of_sd = sd(mean))
View(hejsa)
hejsa <- agg %>% group_by(Parti) %>% summarise(mean = mean(sd_theta),
sd = sd(sd_theta)) %>% summarise(mean_of_mean = mean(mean),
mean_of_sd = mean(sd))
View(hejsa)
View(agg)
get_prior(f1, data = agg)
View(agg)
View(agg)
agg <- agg %>% na.omit() %>% filter(mean_theta != 0 & sd_theta != 0)
mean(log(agg$Inclusion))
sd(log(agg$Inclusion))
sd(log(agg$Inclusion))
logmeans <- agg %>%
mutate(log_inclusion = log(Inclusion)) %>%
group_by(Parti) %>%
summarise(mean = mean(log_inclusion),
sd = sd(log_inclusion)) %>%
summarise(mean_of_means = mean(mean),
mean_of_sd = mean(sd))
View(logmeans)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data <- read_csv("./data/folketinget_2009_2021_raw.csv")
nrows(data)
??nrows
nrow(data)
length(unique(data[["Year"]]))
sample <- data %>% group_by(Year) %>% sample_n(round(100/length(unique(data[["Year"]]))))
View(sample)
sample <- data %>% group_by(Year) %>% sample_n(5)
View(sample)
sample <- data %>% group_by(Year) %>% sample_n(round(100/length(unique(data[["Year"]]))))
# sa
set.seed(123)
sample <- data %>% group_by(Year) %>% sample_n(round(100/length(unique(data[["Year"]]))))
View(sample)
# sa
set.seed(124)
sample <- data %>% group_by(Year) %>% sample_n(round(100/length(unique(data[["Year"]]))))
# sa
set.seed(123)
sample <- data %>% group_by(Year) %>% sample_n(round(100/length(unique(data[["Year"]]))))
sample <- data %>% group_by(Year) %>% sample_n(round(100/length(unique(data[["Year"]])))) %>% select(id, text)
View(sample)
sample <- data %>% group_by(Year) %>% sample_n(round(100/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text)
View(sample)
# sample ~200 values across different years
set.seed(123)
sample <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text)
View(sample)
# packages
library(tidyverse, dplyr, wakefield)
answer(n, x = c("No", "Yes"), prob = NULL, name = "Answer")
# packages
install.packages(wakefield)
# packages
pacman::p_load_gh("trinker/wakefield")
answer(n, x = c("No", "Yes"), prob = NULL, name = "Answer")
answer(n, x = c("No", "Yes"), prob = NULL, name = "Answer", size = 5)
answer(n, x = c("No", "Yes"), prob = NULL, name = "Answer", n = 5)
answer(n = 5, x = c("No", "Yes"), prob = NULL, name = "Answer")
answer(n = 5, x = c("No", "Yes"), prob = 1, name = "Answer")
answer(n = 5, x = c("No", "Yes"), prob = 1.0, name = "Answer")
answer(n = 5, x = c("No", "Yes"), prob = 0.2, name = "Answer")
?answer
answer(n = 5, x = c("No", "Yes"), prob = c(1,1,1,1,1), name = "Answer")
answer(n = 100, x = c("No", "Yes"), prob = NULL, name = "Answer")
sample$correct <- answer(n = nrow(sample), x = c("No", "Yes"), prob = NULL, name = "Answer")
View(sample)
?rep
sample$correct <- rep(x = (1,2), times = nrow(sample))
n <- nrow(samples) # sample size
sample(c(0,1), replace=TRUE, size=samples)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text)
n <- nrow(samples) # sample size
sample(c(0,1), replace=TRUE, size=samples)
sample(c(0,1), replace=TRUE, size=n)
samples$correct <- sample(c(0,1), replace=TRUE, size=n)
sum(samples$correct)/nrow(samples)
View(samples)
morten <- sample_n(samples, nrow(samples)/2)
?sample_n
samples %>% sample_n(10)
samples %>% sample_n(10) %>% mutate(who = "Morten")
morten <- samples %>% sample_n(10) %>% mutate(who = "Morten")
View(morten)
morten <- samples %>% sample_n(50) %>% mutate(who = "Morten")
morten <- samples %>% sample_n(nrow(samples)/2) %>% mutate(who = "Morten")
samples$who <- ifelse(id %in% morten$id, "Morten", "Gustav")
View(samples)
morten$id
morten <- samples %>% sample_n(nrow(samples)/2) %>% mutate(who = "Morten") %>% as.list(id)
samples$who <- ifelse(id %in% morten$id, "Morten", "Gustav")
ifelse(id %in% morten$id, "Morten", "Gustav")
ifelse(samples$id %in% morten$id, "Morten", "Gustav")
# sample ~200 values across different years
set.seed(123)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text)
morten <- samples %>% sample_n(nrow(samples)/2) %>% mutate(who = "Morten")
samples$who <- ifelse(samples$id %in% morten$id, "Morten", "Gustav")
samples$who <- ifelse(samples$id %in% (samples %>% sample_n(nrow(samples)/2)) %>% .id, "Morten", "Gustav")
samples$who <- ifelse(samples$id %in% (samples %>% sample_n(nrow(samples)/2)) %>% as.list(id)), "Morten", "Gustav")
samples$who <- ifelse(samples$id %in% (sample_n(samples, nrow(samples)/2) %>% as.list(id)), "Morten", "Gustav")
View(samples)
samples$who <- ifelse(samples$id %in% (sample_n(samples$id, nrow(samples)/2)), "Morten", "Gustav")
View(samples)
samples$who <- ifelse(samples$id %in% as.list((sample_n(samples$id, nrow(samples)/2))), "Morten", "Gustav")
samples$who <- ifelse(samples$id %in% as.tibble((sample_n(samples$id, nrow(samples)/2))), "Morten", "Gustav")
samples$who <- ifelse(samples$id %in% as.data.frame((sample_n(samples$id, nrow(samples)/2))), "Morten", "Gustav")
sample_n(samples$id, nrow(samples)/2)
sample(samples$id, nrow(samples)/2)
samples$who <- ifelse(samples$id %in% ((sample(samples$id, nrow(samples)/2))), "Morten", "Gustav")
View(samples)
length(samples$who == "Morten")
length(samples$who == "Gustav")
length(filter(samples$who == "Gustav"))
samples %>% group_by(who) %>% count(n())
samples %>% group_by(who) %>% count()
# sample ~200 values across different years
set.seed(123)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text)
# assign rater
samples$who <- ifelse(samples$id %in% ((sample(samples$id, nrow(samples)/2))), "Morten", "Gustav")
samples %>% group_by(who) %>% count()
# sample ~200 values across different years
set.seed(124)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text)
# assign rater
samples$who <- ifelse(samples$id %in% ((sample(samples$id, nrow(samples)/2))), "Morten", "Gustav")
samples %>% group_by(who) %>% count()
length((sample(samples$id, nrow(samples)/2)))
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text, doc_id)
# assign rater
samples$who <- ifelse(samples$id %in% ((sample(samples$doc_id, nrow(samples)/2))), "Morten", "Gustav")
samples %>% group_by(who) %>% count()
# assign rater
samples$who <- ifelse(samples$doc_id %in% ((sample(samples$doc_id, nrow(samples)/2))), "Morten", "Gustav")
samples %>% group_by(who) %>% count()
View(samples)
paste0(n, " hej")
# sample ~200 values across different years
set.seed(124)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text, doc_id, year)
samples <- data %>% group_by(Year) %>% sample_n(round(200/length(unique(data[["Year"]])))) %>% ungroup() %>% select(id, text, doc_id, Year)
# assign rater
samples$who <- ifelse(samples$doc_id %in% ((sample(samples$doc_id, nrow(samples)/2))), "Morten", "Gustav")
samples %>% group_by(who) %>% count()
paste0(nrows(samples), "_", max(samples$Year, "_", min(samples$Year)))
paste0(nrow(samples), "_", max(samples$Year, "_", min(samples$Year)))
View(samples)
min(samples$Year)
paste0(nrow(samples), "_", max(samples$Year), "_", min(samples$Year)))
paste0(nrow(samples), "_", max(samples$Year), "_", min(samples$Year))
paste0(nrow(samples), "_", min(samples$Year), "_", max(samples$Year))
paste0("samples", nrow(samples), "_", min(samples$Year), "_", max(samples$Year))
paste0("samples_", nrow(samples), "_", min(samples$Year), "_", max(samples$Year))
paste0(nrow(samples), "_samples_", min(samples$Year), "-", max(samples$Year))
?write_csv
write_csv(x = samples, file = paste0("./data/", nrow(samples), "_samples_", min(samples$Year), "-", max(samples$Year)))
write_csv(x = samples, file = paste0("./data/", nrow(samples), "_samples_", min(samples$Year), "-", max(samples$Year), ".csv"))
library(tidyverse, dplyr)
df <- read_csv("./data/195_samples_2009-2021.csv") %>% filter(who == "Morten")
gustav <- read_csv("./data/195_samples_2009-2021.csv") %>% filter(who == "Gustav")
morten <- read_csv("./data/195_samples_2009-2021.csv") %>% filter(who == "Morten")
View(morten)
doc_ids <- morten$doc_id %>% sort()
doc_ids
ids <- morten$id %>% sort()
ids
split = readline(prompt = paste0("is ", n, " split correctly?"))
docidddd <- 123
docidddd <- "123"
split <- "yes"
assignment <- "no"
assessment_results <- data.frame()
?rbind
row <- c(docidddd, split, assignment)
rbind(assessment_results, row)
View(assessment_results)
rbind(assessment_results, row)
assessment_results <- rbind(assessment_results, row)
View(assessment_results)
assessment_results <- data.frame("doc_id")
View(assessment_results)
setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
View(assessment_results)
assessment_results <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
View(data)
View(assessment_results)
assessment_results <- rbind(assessment_results, row)
View(assessment_results)
?rbind
ratings[nrow(ratings)+1,] <- row
ratings <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
row <- c(docidddd, split, assignment)
ratings[nrow(ratings)+1,] <- row
View(ratings)
morten <- read_csv("./data/195_samples_2009-2021.csv") %>% filter(who == "Morten") %>% slice(1:3)
doc_ids <- morten$doc_id %>% sort()
assessment <- function(doc_id){
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
split = readline(prompt = paste0("Is ", doc_id, " split correctly?"))
assignment = readline(prompt = paste0("Is ", doc_id, " split correctly?"))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <- row
i = i + 1
}
assessment <- function(doc_id){
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
split = readline(prompt = paste0("Is ", doc_id, " split correctly?"))
assignment = readline(prompt = paste0("Is ", doc_id, " split correctly?"))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <- row
i = i + 1
}
?map
map(.f = assessment, .x = doc_ids)
i = 1
assessment <- function(doc_id){
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly?"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly?"))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <- row
i = i + 1
}
i = 1
map(.f = assessment, .x = doc_ids)
View(ratings)
assessment <- function(doc_id){
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly?"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly?"))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <- row
i = i + 1
}
i = 1
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
map(.f = assessment, .x = doc_ids)
assessment <- function(doc_id){
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly?"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly?"))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <<- row
i = i + 1
}
i = 1
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
map(.f = assessment, .x = doc_ids)
View(ratings)
assessment <- function(doc_id){
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly ?"))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <<- row
i = i + 1
}
i = 1
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
map(.f = assessment, .x = doc_ids)
assessment <- function(doc_id){
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <<- row
i = i + 1
}
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
map(.f = assessment, .x = doc_ids)
View(results)
View(ratings)
hep <- map(.f = assessment, .x = doc_ids)
View(hep)
hep <- hep %>% unnest()
class(hep)
hep[1]
get_prior(f1, data = agg)
get_prior(f1, data = agg)
###################################################### MORTEN ######################################################
morten <- read_csv("./data/195_samples_2009-2021.csv") %>% filter(who == "Morten") %>% slice(1:3)
morten_ids <- morten$doc_id %>% sort()
assessment <- function(doc_id){
split = readline(prompt = paste0("Is the text in ", doc_id, " split correctly? "))
assignment = readline(prompt = paste0("Is the text in ", doc_id, " assigned correctly? "))
row <- c(doc_id, split, assignment)
ratings[nrow(ratings)+i,] <<- row
i = i + 1
}
i = 1
ratings <<- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("doc_id", "split", "assignment"))
map(.f = assessment, .x = doc_ids)
# join by doc_id at the end
# i would like there to be an argument for df...
View(ratings)
View(morten)
